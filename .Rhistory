ggplot(heart_data, aes(x = age, y = .data[[col_name]], color = numrev)) +
geom_point(alpha = 1, size = 2) +
ggtitle(paste(col_name, "vs. age"))
})
# Arrange plots in a grid
grid.arrange(grobs = plot_list, ncol = 2)
# Identifying categorical associations
ggplot(heart_data, aes(x = exang, fill = num)) +
geom_bar(position = "fill") +
labs(title = "Exercise-Induced Angina by Heart Disease Status",
x = "Exercise-Induced Angina (exang)", y = "Proportion")
# Boxplots for numerical variables
ggplot(heart_data, aes(x = num, y = trestbps, fill = num)) +
geom_boxplot() +
labs(title = "Resting Blood Pressure by Heart Disease Status",
x = "Heart Disease (0 = No, 1 = Yes)", y = "Resting Blood Pressure")
# Function to generate barplots (categorical) or histograms (continuous)
plot_list <- lapply(head(cat_cols,-2), function(i) {
col_name <- names(heart_data)[i]
# Categorical variables
ggplot(heart_data, aes(x = num, y = trestbps, fill = num)) +
geom_boxplot() +
labs(title = "Resting Blood Pressure by Heart Disease Status",
x = "Heart Disease (0 = No, 1 = Yes)", y = "Resting Blood Pressure")
})
# Arrange plots in a grid
grid.arrange(grobs = plot_list, ncol = 3)
# Function to generate barplots (categorical) or histograms (continuous)
plot_list <- lapply(head(cat_cols,-2), function(i) {
col_name <- names(heart_data)[i]
# Categorical variables
ggplot(heart_data, aes(x = numrev, y = .data[[col_name]], fill = numrev)) +
geom_boxplot() +
labs(title = "Resting Blood Pressure by Heart Disease Status",
x = "Heart Disease (0 = No, 1 = Yes)", y = "Resting Blood Pressure")
})
# Arrange plots in a grid
grid.arrange(grobs = plot_list, ncol = 3)
# Function to generate barplots (categorical) or histograms (continuous)
plot_list <- lapply(head(cat_cols,-2), function(i) {
col_name <- names(heart_data)[i]
# Categorical variables
ggplot(heart_data, aes(x = numrev, y = trestbps, fill = num)) +
geom_boxplot() +
labs(title = "Resting Blood Pressure by Heart Disease Status",
x = "Heart Disease (0 = No, 1 = Yes)", y = "Resting Blood Pressure")
})
# Arrange plots in a grid
grid.arrange(grobs = plot_list, ncol = 3)
# Function to generate barplots (categorical) or histograms (continuous)
plot_list <- lapply(head(cat_cols,-2), function(i) {
col_name <- names(heart_data)[i]
# Categorical variables
ggplot(heart_data, aes(x = numrev, y = .data[[col_name]], fill = num)) +
geom_boxplot() +
labs(title = "Resting Blood Pressure by Heart Disease Status",
x = "Heart Disease (0 = No, 1 = Yes)", y = "Resting Blood Pressure")
})
# Arrange plots in a grid
grid.arrange(grobs = plot_list, ncol = 3)
# Function to generate barplots (categorical) or histograms (continuous)
plot_list <- lapply(cont_cols, function(i) {
col_name <- names(heart_data)[i]
# Categorical variables
ggplot(heart_data, aes(x = numrev, y = .data[[col_name]], fill = num)) +
geom_boxplot() +
labs(title = "Resting Blood Pressure by Heart Disease Status",
x = "Heart Disease (0 = No, 1 = Yes)", y = "Resting Blood Pressure")
})
# Arrange plots in a grid
grid.arrange(grobs = plot_list, ncol = 3)
# Function to generate barplots (categorical) or histograms (continuous)
plot_list <- lapply(cont_cols, function(i) {
col_name <- names(heart_data)[i]
# Categorical variables
ggplot(heart_data, aes(x = numrev, y = .data[[col_name]], fill = numrev)) +
geom_boxplot() +
labs(title = "Resting Blood Pressure by Heart Disease Status",
x = "Heart Disease (0 = No, 1 = Yes)", y = "Resting Blood Pressure")
})
# Arrange plots in a grid
grid.arrange(grobs = plot_list, ncol = 3)
# Function to generate barplots (categorical) or histograms (continuous)
plot_list <- lapply(cont_cols, function(i) {
col_name <- names(heart_data)[i]
# Categorical variables
ggplot(heart_data, aes(x = num, y = .data[[col_name]], fill = numrev)) +
geom_boxplot() +
labs(title = "Resting Blood Pressure by Heart Disease Status",
x = "Heart Disease (0 = No, 1 = Yes)", y = "Resting Blood Pressure")
})
# Arrange plots in a grid
grid.arrange(grobs = plot_list, ncol = 3)
# Function to generate barplots (categorical) or histograms (continuous)
plot_list <- lapply(cont_cols, function(i) {
col_name <- names(heart_data)[i]
# Categorical variables
ggplot(heart_data, aes(x = num, y = .data[[col_name]], fill = numrev)) +
geom_boxplot() +
ggtitle(col_name)
})
# Arrange plots in a grid
grid.arrange(grobs = plot_list, ncol = 3)
# Function to generate barplots (categorical) or histograms (continuous)
plot_list <- lapply(cont_cols, function(i) {
col_name <- names(heart_data)[i]
# Categorical variables
ggplot(heart_data, aes(x = num, y = .data[[col_name]], fill = numrev)) +
geom_boxplot() +
ggtitle(col_name)
})
# Arrange plots in a grid
grid.arrange(grobs = plot_list, ncol = 3)
heart_data$numrev <- factor(heart_data$num, levels = 4:0)
ggplot(heart_data, aes(x = num, fill = numrev)) +
geom_bar() +
labs(title = "Target Variable Distribution",
x = "Heart Disease (0 = No, 1 = Yes)", y = "Count")
heart_data$numrev <- factor(heart_data$num, levels = 4:0)
ggplot(heart_data, aes(x = num, fill = numrev)) +
geom_bar() +
labs(title = "Target Variable Distribution",
x = "Heart Disease Status", y = "Count")
# Function to generate barplots (categorical) or histograms (continuous)
plot_list <- lapply(cont_cols, function(i) {
col_name <- names(heart_data)[i]
# Categorical variables
ggplot(heart_data, aes(x = num, y = .data[[col_name]], fill = numrev)) +
geom_boxplot() +
ggtitle(col_name)
})
# Arrange plots in a grid
grid.arrange(grobs = plot_list, ncol = 3)
# Function to generate barplots (categorical) or histograms (continuous)
plot_list <- lapply(cont_cols, function(i) {
col_name <- names(heart_data)[i]
# Categorical variables
ggplot(heart_data, aes(x = num, y = .data[[col_name]], fill = numrev)) +
geom_boxplot() +
ggtitle(col_name)
})
# Arrange plots in a grid
grid.arrange(grobs = plot_list, ncol = 3)
data <- read_excel("data/mortality_rates_covid19.xlsx", col_names = TRUE) #Load data
#We change names to more accessible ones
setnames(data,
old = c('ARDS Diagnosis','Use of NIV','Use of AMV', 'Days with ARDS', 'Days with NIV', 'Days with AMV'),
new = c('ARDS','NIV','AMV','daysARDS', 'daysNIV', 'daysAMV'))
View(data)
# Read excel:
df <- read_excel("data/gene_expression.xlsx", col_names = TRUE, na=c("NI", "ND"), skip = 1) #skip 1st line (not header)
colnames(df)[1:2] <- c("ID", "Day") # Rename first two columns for clarity
df$ID <- str_extract(df$ID, "\\d+$")  # Extract only numbers from Patient_ID
# Fill missing Patient_ID values downwards
df <- df %>%
fill(ID, .direction = "down")
View(df)
#Loads the needed libraries:
# For Ex 1:
library(tidyverse)
library(corrplot)
library(mlbench)
library("GGally")
# For Ex 2:
library(dplyr)
library(tidyr)
library(ggplot2)
library(readxl)
library(gtable)
library(data.table)
library(gridExtra)
library(grid)
library(patchwork)
library(stringr)
library(ComplexHeatmap)
library(circlize)
set.seed(123) # Set seed for reproducibility
# Read file with correct delimiter (spaces)
heart_data <- read.csv("data/heart_disease_dataset.csv", sep = " ", header = TRUE, na.strings = c("?"))
heart_data <- heart_data[,1:14] #Remove ID column
# Check the loaded columns
cat("Number of features:", ncol(heart_data)-1, "\n")
cat("Number of patients:", nrow(heart_data), "\n")
# Explore dataset
cat("\nDataset structure:\n")
str(heart_data)
# Check missing values per columns
cat("Number of missing values per column before cleaning:\n")
print(colSums(is.na(heart_data)))
# Omits rows with na
heart_data <- na.omit(heart_data)
# Check the loaded columns again
cat("\nNumber of features:", ncol(heart_data)-1, "\n")
cat("Number of patients:", nrow(heart_data), "\n")
# Check that now we do not have na
cat("\nTotal number of missing values after cleaning:", sum(colSums(is.na(heart_data))))
cont_cols <- c(1, 4, 5, 8, 10)  # Corresponding to age, trestbps, chol, thalach and oldpeak
cat_cols <- setdiff(1:ncol(heart_data), cont_cols)  # The rest are categorical
heart_data_num <- heart_data #Keep the dataset in numerical if needed later
heart_data[cat_cols] <- lapply(heart_data[cat_cols], as.factor)
str(heart_data)
cat("Dataset summary:\n")
summary(heart_data)
#Custom widths for histograms
hist_bins <- c(10, 10, 20, 10, 0.5)
# Function to generate barplots (categorical) or histograms (continuous)
plot_list <- lapply(1:ncol(heart_data), function(i) {
col_name <- names(heart_data)[i]
if (i %in% cont_cols) {
ggplot(heart_data, aes(x = .data[[col_name]])) +
geom_histogram(binwidth = hist_bins[match(i, cont_cols)], fill = "steelblue", color = "black") +
ggtitle(col_name)
} else {
ggplot(heart_data, aes(x = .data[[col_name]])) +
geom_bar(fill = "steelblue", color = "black") +
ggtitle(col_name)
}
})
# Arrange plots in a grid
grid.arrange(grobs = plot_list, ncol = 4)
# Generate Q-Q plots for selected continuous columns
qq_plots <- lapply(cont_cols, function(i) {
col_name <- names(heart_data)[i]
ggplot(heart_data, aes(sample = .data[[col_name]])) +
stat_qq() +
stat_qq_line() +
ggtitle(paste(col_name))
})
# Arrange plots in a grid
grid.arrange(grobs = qq_plots, ncol = 3)
#Scatter plots pairwise:
ggpairs(heart_data[,hist_cols])
#Scatter plots pairwise:
ggpairs(heart_data[,cont_cols])
res <- cor(heart_data[, cont_cols]) #correlation matrix
#Correlation plot:
corrplot(res, type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45)
res <- cor(heart_data[, cont_cols]) #correlation matrix
#Correlation plot:
corrplot(res, type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45)
res <- cor(heart_data[, cont_cols]) #correlation matrix
#Correlation plot:
corrplot(res, type = "upper", order = "hclust",
tl.col = "black", tl.srt = 45)
#Boxplot with one categorical group
ggplot(heart_data, aes(x = interaction(sex), y = trestbps)) +
geom_boxplot(fill = "lightblue", color = "black") +
labs(title = "Boxplot of Rest BPS respect to gender",
x = "Gender",
y = "Blood Pressure (mmHg)") +
scale_x_discrete(labels = c("Female", "Male")) +
theme(axis.text.x = element_text(angle = 0, hjust = 1))
#Boxplot with two categorical groups
ggplot(heart_data, aes(x = interaction(sex, fbs), y = chol)) +
geom_boxplot(fill = "lightblue", color = "black") +
labs(title = "Boxplot of Cholesterol respect to Fasting Blood Sugar and Gender",
x = "Gender:FBS",
y = "Cholesterol (mg/dL)") +
scale_x_discrete(labels = c("F:Low", "M:Low", "F:High", "M:High")) +
theme(axis.text.x = element_text(angle = 45, hjust = 1))
# Function to count outliers using the IQR method
count_outliers <- function(x) {
Q1 <- quantile(x, 0.25, na.rm = TRUE)  # First quartile (25%)
Q3 <- quantile(x, 0.75, na.rm = TRUE)  # Third quartile (75%)
IQR_value <- Q3 - Q1  # Interquartile range
lower_bound <- Q1 - 1.5 * IQR_value
upper_bound <- Q3 + 1.5 * IQR_value
# Return the count of outliers
return(sum(x < lower_bound | x > upper_bound, na.rm = TRUE))
}
# Count outliers for each continuous column
outlier_counts <- sapply(cont_cols, function(i) {
count_outliers(heart_data[[i]])
})
# Store results in a data frame
outlier_summary <- data.frame(Column = names(heart_data)[cont_cols], OutlierCount = outlier_counts)
# Print the summary of outliers
print(outlier_summary)
heart_data$numrev <- factor(heart_data$num, levels = 4:0) #Reversed factors for visualization purposes
#Barplot:
ggplot(heart_data, aes(x = num, fill = numrev)) +
geom_bar() +
labs(title = "Target Variable Distribution",
x = "Heart Disease Status", y = "Count")
#Custom widths for histograms
hist_bins <- c(10, 10, 20, 10, 0.5)
# Function to generate histograms
plot_list <- lapply(cont_cols, function(i) {
col_name <- names(heart_data)[i]
#Histogram
ggplot(heart_data, aes(x = .data[[col_name]], fill = numrev)) +
geom_histogram(binwidth = hist_bins[match(i, cont_cols)], position = "stack", color = "black") +
ggtitle(col_name)
})
# Arrange plots in a grid
grid.arrange(grobs = plot_list, ncol = 3)
# Function to generate scatter plots
plot_list <- lapply(cont_cols, function(i) {
col_name <- names(heart_data)[i]
#Boxplots
ggplot(heart_data, aes(x = num, y = .data[[col_name]], fill = numrev)) +
geom_boxplot() +
ggtitle(col_name)
})
# Arrange plots in a grid
grid.arrange(grobs = plot_list, ncol = 3)
# Generates scatterplots (only for continuous, vs. age)
plot_list <- lapply(c(4, 5, 8, 10), function(i) {
col_name <- names(heart_data)[i]
# Scatterplots
ggplot(heart_data, aes(x = age, y = .data[[col_name]], color = numrev)) +
geom_point(alpha = 1, size = 2) +
ggtitle(paste(col_name, "vs. age"))
})
# Arrange plots in a grid
grid.arrange(grobs = plot_list, ncol = 2)
# Generates scatterplots (only for continuous, vs. thalach)
plot_list <- lapply(c(1, 4, 5, 10), function(i) {
col_name <- names(heart_data)[i]
# Scatterplots
ggplot(heart_data, aes(x = thalach, y = .data[[col_name]], color = numrev)) +
geom_point(alpha = 1, size = 2) +
ggtitle(paste(col_name, "vs. Max. Heart Rate"))
})
# Arrange plots in a grid
grid.arrange(grobs = plot_list, ncol = 2)
# Function to generate barplots (categorical)
plot_list <- lapply(head(cat_cols,-2), function(i) {
col_name <- names(heart_data)[i]
# Barplots
ggplot(heart_data, aes(x = .data[[col_name]], fill = numrev)) +
geom_bar(position = "fill") +
ggtitle(col_name)
})
# Arrange plots in a grid
grid.arrange(grobs = plot_list, ncol = 3)
data <- read_excel("data/mortality_rates_covid19.xlsx", col_names = TRUE) #Load data
#We change names to more accessible ones
setnames(data,
old = c('ARDS Diagnosis','Use of NIV','Use of AMV', 'Days with ARDS', 'Days with NIV', 'Days with AMV'),
new = c('ARDS','NIV','AMV','daysARDS', 'daysNIV', 'daysAMV'))
#Histogram:
plotA <- ggplot(data, aes(x = Age)) +
geom_histogram(boundary = 20, binwidth = 10, fill = "lightblue", color = "black", size=1.1) +
labs(title = "Age\n", x = "\nAge (years)", y = "Frequency (n)\n", fontsize = 40) + theme_minimal() +
theme(panel.grid = element_blank(),
axis.title.x = element_text(size = 12, vjust = 2),  # Adjust x axis label size and distance
axis.title.y = element_text(size = 12, vjust = 0),  # Adjust y axis label size and distance
axis.text.x = element_text(size = 12),  # Change x axis tick labels font size
axis.text.y = element_text(size = 12),
axis.line = element_line(color = "black", size=1.1),  # Adds axis lines
axis.ticks = element_line(color = "black", size=1.1),
axis.ticks.length = unit(0.3, "cm"),
plot.title = element_text(hjust = 0.5, size = 15, face = "bold"))
#Dataframe with the criteria:
groups_df <- data.frame(
Clinical = c("G1", "G2", "G3", "G4"),
NIV   = c("–", "–/+", "+", "–/+"),
AMV   = c("+", "+/–", "–", "+"),
ARDS   = c("–", "–", "+", "+")
)
#Build the table
colnames(groups_df) <- c("Clinical classification", "NIV", "AMB", "ARDS")
colnames(groups_df ) <- sapply(lapply(colnames(groups_df), strwrap, width=1), paste, collapse="\n") # string wrap long names
tableB <- tableGrob(groups_df , rows = NULL)
tableB$widths <- unit(c(2, 1, 1, 1), "null")  # Adjust widths for each column
#Convert to grob to be able to insert it to the plot grid:
title_grob <- textGrob("Definition of the clinical classification", gp = gpar(fontsize = 13, fontface = "bold"))
tableB <- gtable_add_rows(tableB, heights = grobHeight(title_grob) + unit(15,'mm'), pos = 0)
tableB <- gtable_add_grob(tableB, title_grob, 2, 1, 1, ncol(tableB), clip = "off")
#Preprocess the columns (correct the non-valid numbers)
ARDS <- data$ARDS
daysARDS <- data$daysARDS
ARDS <- ifelse(ARDS == "Yes", "Yes", ifelse(ARDS == "No", "No", ifelse(daysARDS == 0, "No", "Yes")))
NIV <- data$NIV
daysNIV <- data$daysNIV
NIV <- ifelse(NIV == "Yes", "Yes", ifelse(NIV == "No", "No", ifelse(daysNIV == 0, "No", "Yes")))
AMV <- data$AMV
daysAMV <- data$daysAMV
AMV <- ifelse(AMV == "Yes", "Yes", ifelse(AMV == "No", "No", ifelse(daysAMV == 0, "No", "Yes")))
# Creates group vector under the conditions
group_vect <- ifelse(NIV == "No" & AMV == "No" & ARDS == "No", 1,
ifelse(NIV == "No" & AMV == "Yes" & ARDS == "No", 2,
ifelse(NIV == "Yes" & AMV == "No" & ARDS == "No", 2,
ifelse(NIV == "Yes" & AMV == "No" & ARDS == "Yes", 3,
ifelse(AMV == "Yes" & ARDS == "Yes", 4, 0)))))
#Computes frequencies and inserts on a dataframe
freqs_vect <- c(sum(group_vect==1), sum(group_vect==2), sum(group_vect==3), sum(group_vect==4))
class_df <- data.frame(
group = c("G1", "G2", "G3", "G4"),
frequency = freqs_vect)
#Bar plot:
plotC <- ggplot(class_df, aes(x = group, y = frequency, fill = group)) +
geom_bar(stat = "identity", color = "black", size = 1.1) +
labs(title = "Clinical Classification", x = "\nClinical classification", y = "Frequency (n)\n") +
scale_fill_manual(values = c("#66c2a5", "#ffffb3", "#8da0cb", "#fc8d62")) +
theme_minimal() +
geom_text(aes(label = freqs_vect), stat = "identity", vjust = -0.5, size = 4) +
scale_y_continuous(limits = c(0, 80)) +
theme(legend.position = "none",
panel.grid = element_blank(),
axis.title.x = element_text(size = 12, vjust = 2),  # Adjust x axis label size and distance
axis.title.y = element_text(size = 12, vjust = 0),  # Adjust y axis label size and distance
axis.text.x = element_text(size = 12),  # Change x axis tick labels font size
axis.text.y = element_text(size = 12),
axis.line = element_line(color = "black", size=1.1),  # Adds axis lines
axis.ticks = element_line(color = "black", size=1.1),
axis.ticks.length = unit(0.3, "cm"),
plot.title = element_text(hjust = 0.5, size = 15, face = "bold"))
#Preprocess the columns (correct the non-valid numbers)
deaths <- data$Death
deaths <- ifelse(deaths == "Yes", "Yes", ifelse(deaths == "No", "No", "No"))
#Computes frequencies and inserts on a dataframe
freqsD_vect <- c(sum(deaths=="No"), sum(deaths=="Yes"))
death_df <- data.frame(
group = c("No", "Yes"),
frequency = freqsD_vect)
#Bar plot:
plotD <- ggplot(death_df, aes(x = group, y = frequency, fill = group)) +
geom_bar(stat = "identity", color = "black", size = 1.1) +
labs(title = "Vital status", x = "\nDeath", y = "Frequency (n)\n") +
scale_fill_manual(values = c("#66c2a5", "#ffffb3")) +
theme_minimal() +
geom_text(aes(label = freqsD_vect), stat = "identity", vjust = -0.5, size = 4) +
scale_y_continuous(limits = c(0, 180)) +
theme(legend.position = "none",
panel.grid = element_blank(),
axis.title.x = element_text(size = 12, vjust = 2),  # Adjust x axis label size and distance
axis.title.y = element_text(size = 12, vjust = 0),  # Adjust y axis label size and distance
axis.text.x = element_text(size = 12),  # Change x axis tick labels font size
axis.text.y = element_text(size = 12),
axis.line = element_line(color = "black", size=1.1),  # Adds axis lines
axis.ticks = element_line(color = "black", size=1.1),
axis.ticks.length = unit(0.3, "cm"),
plot.title = element_text(hjust = 0.5, size = 15, face = "bold"))
letterA <- textGrob("A", x = 0.05, y = 20, gp = gpar(fontsize = 15, fontface = "bold"))
letterB <- textGrob("B", x = 0, y = 2.9, gp = gpar(fontsize = 15, fontface = "bold"))
letterC <- textGrob("C", x = 0.05, y = 20, gp = gpar(fontsize = 15, fontface = "bold"))
letterD <- textGrob("D", x = 0, y = 20, gp = gpar(fontsize = 15, fontface = "bold"))
grid.arrange(arrangeGrob(plotA, letterA, heights = c(1, 0.05)),
arrangeGrob(tableB, letterB, heights = c(1, 0.5)),
arrangeGrob(plotC, letterC, heights = c(1, 0.05)),
arrangeGrob(plotD, letterD, heights = c(1, 0.05)), ncol=2)
# Read excel:
df <- read_excel("data/gene_expression.xlsx", col_names = TRUE, na=c("NI", "ND"), skip = 1) #skip 1st line (not header)
colnames(df)[1:2] <- c("ID", "Day") # Rename first two columns for clarity
df$ID <- str_extract(df$ID, "\\d+$")  # Extract only numbers from Patient_ID
# Fill missing Patient_ID values downwards
df <- df %>%
fill(ID, .direction = "down")
cytokine_cols <- colnames(df)[3:14]  # Select only cytokine-related columns
df[cytokine_cols] <- lapply(df[cytokine_cols], as.numeric) # Convert numeric columns
# Compute median per patient across time points
df_median <- df %>%
group_by(ID) %>%
summarise(across(all_of(cytokine_cols), median, na.rm = TRUE))  # Median ignoring NA
#Builds clinical info dataframe
df_ex1 <- data.frame(ID = data$ID, Group = group_vect, Gender = data$Gender, Status = data$Death)
df_ex1 <- distinct(df_ex1, ID, .keep_all = TRUE)
df_ex1$ID <- str_extract(df_ex1$ID, "\\d+$")  # Keep only trailing numbers
#Merges cytokine with clinical info
df_median <- inner_join(df_ex1, df_median, by = "ID")
df_median <- df_median[order(df_median$Group),] #We order by groups, so appear ordered in the annotation
#Select only cytokine values (scaled) and remove nans (assign 0)
cytokine_data <- t(scale(df_median[,5:16]))#*100/max(df_median[,3:14], na.rm=TRUE)
cytokine_data[is.na(cytokine_data)] = 0
# Define colors for patient groups
group_colors <- c("0" = "grey", "1" = "#a5ddff", "2" = "#59c0ff", "3" = "#4fa9df", "4" = "#2e50f9")
# Create column annotation for patient groups
ha <- HeatmapAnnotation(Group = df_median$Group,
col = list(Group = group_colors),
annotation_legend_param = list(title = "Patient Group"))
# Generate Heatmap (no column clustering and names)
Heatmap(cytokine_data,
name = "Expression",
top_annotation = ha,  # Annotate patients (columns)
col = colorRamp2(c(-1, 0.5, 2), c("#FFF5EB", "#FE9D53", "#8D2C03")), # Color scale
cluster_rows = TRUE,  # Enable cytokine clustering
cluster_columns = FALSE,  # Disable patient clustering
show_row_names = TRUE,  # Keep cytokine names visible
show_column_names = FALSE)  # Hide patient names
df_median$Status <- replace(df_median$Status, is.na(df_median$Status), "No") #Assign No to na values
# Conversion to factors:
df_median$Group <- factor(df_median$Group, levels = c("0", "1", "2", "3", "4"))
df_median$Status <- factor(df_median$Status, levels = c("No", "Yes"))
df_median$Gender <- factor(df_median$Gender, levels = c("M", "F"))
# Sort the dataframe
df_ordered <- df_median %>%
arrange(Group, Status, Gender)
# Define colors for patient groups, vital status and gender
group_colors <- c("0" = "grey", "1" = "#a5ddff", "2" = "#59c0ff", "3" = "#4fa9df", "4" = "#2e50f9")
status_colors <- c("No" = "white", "Yes" = "black")
gender_colors <- c("M" = "#ff9983", "F" = "#aeff83")
# Create column annotation for patient groups
ha <- HeatmapAnnotation(Group = df_ordered$Group,
Status = df_ordered$Status,
Gender = df_ordered$Gender,
col = list(Group = group_colors, Status = status_colors, Gender = gender_colors),
annotation_legend_param = list(Group = list(title = "Patient Group"),
Status = list(title = "Survival Status"),
Gender = list(title = "Gender")))
# Generate Heatmap (no column clustering and names)
Heatmap(cytokine_data,
name = "Expression",
top_annotation = ha,  # Annotate patients (columns)
col = colorRamp2(c(-1, 0.5, 2), c("#FFF5EB", "#FE9D53", "#8D2C03")), # Color scale
cluster_rows = TRUE,  # Enable cytokine clustering
cluster_columns = FALSE,  # Disable patient clustering
show_row_names = TRUE,  # Keep cytokine names visible
show_column_names = FALSE)  # Hide patient names
